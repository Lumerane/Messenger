[{"name":"Messenger.Recursion","comment":"\n\n\n# Recursion\n\nThis module provides the signature for the updater.\n\n@docs RecBody\n\n","unions":[],"aliases":[{"name":"RecBody","comment":" RecBody type.\n\nPass this as an argument to the updater.\n\n","args":["a","b","c","d"],"type":"{ update : Messenger.Recursion.Updater a b c d, match : Messenger.Recursion.Matcher a d, super : Messenger.Recursion.Super d }"}],"values":[],"binops":[]},{"name":"Messenger.RecursionArray","comment":"\n\n\n# RecursionArray\n\nArray implementation for the recursion algorithm\n\n@docs updateObjects\n\n","unions":[],"aliases":[],"values":[{"name":"updateObjects","comment":" Recursively update all the objects in the List\n","type":"Messenger.Recursion.RecBody a b c d -> c -> b -> Array.Array a -> ( Array.Array a, List.List b, c )"}],"binops":[]},{"name":"Messenger.RecursionList","comment":"\n\n\n# RecursionList\n\nList implementation for the recursion algorithm\n\n@docs updateObjects\n\n","unions":[],"aliases":[],"values":[{"name":"updateObjects","comment":" Recursively update all the objects in the List\n","type":"Messenger.Recursion.RecBody a b c d -> c -> b -> List.List a -> ( List.List a, List.List b, c )"}],"binops":[]}]